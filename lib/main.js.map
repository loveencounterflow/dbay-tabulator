{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-TABULATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\nGUY                       = require 'guy'\n{ SQL }                   = GUY.str\n{ HDML }                  = require 'hdml'\n{ Common_mixin }          = require './common-mixin'\n\n\n\n#===========================================================================================================\nclass @Tabulator extends Common_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  as_html: ( cfg ) ->\n    cfg         = { @defaults.vgt_as_html_cfg..., cfg..., }\n    @types.validate.vgt_as_html_cfg cfg\n    return @_table_as_html cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _fields_from_cfg: ( cfg ) ->\n    R = { cfg.fields..., }\n    for key, value of R\n      value     = {} if value is true\n      R[ key ]  = { @defaults.vgt_field_description_object..., value..., }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _keys_from_keys_row_and_fields: ( keys, row, fields ) ->\n    return Object.keys switch keys\n      when 'row,cfg'  then { row..., fields..., }\n      when 'cfg,row'  then { fields..., row..., }\n      when 'row'      then row\n      when 'cfg'      then fields\n\n  #---------------------------------------------------------------------------------------------------------\n  _title_from_field_and_key: ( field, key ) ->\n    if field?\n      return null if field.display is false\n      return field.title ? key\n    return key\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_as_html: ( cfg ) ->\n    { rows }      = cfg\n    fields        = @_fields_from_cfg cfg\n    keys          = null\n    R             = []\n    row_nr        = 0\n    has_ths       = false\n    #.......................................................................................................\n    push_table_headers = ( row = null ) =>\n      has_ths = true\n      keys    = @_keys_from_keys_row_and_fields cfg.keys, row, fields\n      return if keys.length is 0\n      R.push HDML.open 'tr'\n      for key in keys\n        if ( field = fields[ key ] )?\n          continue if field.display is false\n          title = field.title ? key\n        else\n          title = key\n        R.push HDML.pair 'th', { class: key, }, HDML.text title\n      R.push HDML.close 'tr'\n      return null\n    #.......................................................................................................\n    R.push HDML.open 'table', if cfg.class? then { class: cfg.class, } else null\n    #.......................................................................................................\n    for row from rows\n      row_nr++\n      push_table_headers row if row_nr is 1\n      #.....................................................................................................\n      R.push HDML.open 'tr'\n      for key in keys\n        field       = fields[ key ] ? null\n        continue unless ( title = @_title_from_field_and_key )?\n        #...................................................................................................\n        raw_value   = row[ key ]\n        value       = raw_value\n        value       = field?.undefined ? cfg.undefined ? 'undefined' if value is undefined\n        is_done     = false\n        inner_html  = null\n        if field?\n          details = { key, raw_value, row_nr, row, }\n          if field.value?\n            value = field.value value, details\n          if ( as_html = field.outer_html ? null )?\n            is_done = true\n            R.push as_html value, details\n          else if ( as_html = field.inner_html ? null )?\n            inner_html = as_html value, details\n        unless is_done\n          if inner_html?\n            R.push HDML.pair 'td', { class: key, }, inner_html\n          else\n            value = rpr value unless @types.isa.text value\n            R.push HDML.pair 'td', { class: key, }, HDML.text value\n      #.....................................................................................................\n      R.push HDML.close 'tr'\n    #.......................................................................................................\n    push_table_headers null unless has_ths\n    R.push HDML.close 'table'\n    return R.join '\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  row_as_subtable_html: ( cfg ) ->\n    cfg     = { @defaults.vgt_row_as_subtable_html_cfg..., cfg..., }\n    @types.validate.vgt_row_as_subtable_html_cfg cfg\n    row     = if ( @types.isa.object cfg.row ) then cfg.row else JSON.parse cfg.row\n    fields  = @_fields_from_cfg cfg\n    keys    = @_keys_from_keys_row_and_fields cfg.keys, row, fields\n    R       = []\n    R.push HDML.open 'table', if cfg.class? then { class: cfg.class, } else null\n    for key in keys\n      field = fields[ key ]\n      continue unless ( title = @_title_from_field_and_key field, key )?\n      #.....................................................................................................\n      value = row[ key ]\n      R.push HDML.open 'tr'\n      R.push HDML.pair 'th', HDML.text key\n      R.push HDML.pair 'td', HDML.text value\n      R.push HDML.close 'tr'\n    R.push HDML.close 'table'\n    return R.join '\\n'\n\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_table_name: ( name ) ->\n    @types.validate.nonempty_text name\n    return \"_#{@cfg.prefix}_#{name[1..]}\" if name.startsWith '_'\n    return \"#{@cfg.prefix}_#{name}\"\n\n\n\n"
  ]
}