{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n{ HDML, }                 = require 'hdml'\n\n\n\n\n#===========================================================================================================\n@DBay_html = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  as_html: ( cfg ) ->\n    ### TAINT iterate or use stream ###\n    cfg         = { @defaults.vogue_db_as_html_cfg..., cfg..., }\n    @types.validate.vogue_db_as_html_cfg cfg\n    if cfg.table?\n      table_i   = @db.sql.I cfg.table\n      cfg.rows  = @db SQL\"\"\"select * from #{table_i};\"\"\"\n    else if cfg.query?\n      cfg.rows  = @db cfg.query, cfg.parameters ? {}\n    else if cfg.rows?\n      null\n    return @_table_as_html cfg\n    # try return @_table_as_html cfg catch error then null\n    # return error.message\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_as_html: ( cfg ) ->\n    ### TAINT move this to DBay ###\n    ### TAINT use SQL generation facility from DBay (TBW) ###\n    { rows\n      fields  }   = cfg\n    fields        = { fields..., }\n    # for key, value of fields\n    #   if value is true then fields[ key ] = {}\n    for key, value of fields\n      value         = {} if value is true\n      fields[ key ] = { @defaults.vogue_db_field_description_object..., value..., }\n    debug '^354^', { fields, }\n    keys          = null\n    R             = []\n    row_nr        = 0\n    has_ths       = false\n    #.......................................................................................................\n    push_table_headers = ( row = null ) =>\n      has_ths = true\n      keys = Object.keys switch cfg.keys\n        when 'row,cfg'  then { row..., fields..., }\n        when 'cfg,row'  then { fields..., row..., }\n        when 'row'      then row\n        when 'cfg'      then fields\n      return if keys.length is 0\n      R.push HDML.open 'tr'\n      for key in keys\n        if ( field = fields[ key ] )?\n          continue if field.display is false\n          title = field.title ? key\n        else\n          title = key\n        R.push HDML.pair 'th', { class: key, }, HDML.text title\n      R.push HDML.close 'tr'\n      return null\n    #.......................................................................................................\n    R.push HDML.open 'table', { class: cfg.class, }\n    #.......................................................................................................\n    for row from rows\n      row_nr++\n      push_table_headers row if row_nr is 1\n      #.....................................................................................................\n      R.push HDML.open 'tr'\n      for key in keys\n        raw_value   = row[ key ]\n        value       = raw_value\n        field       = fields[ key ] ? null\n        value       = field?.undefined ? cfg.undefined ? 'undefined' if value is undefined\n        is_done     = false\n        inner_html  = null\n        if field?\n          continue if field.display is false\n          details = { key, raw_value, row_nr, row, }\n          if field.value?\n            value = field.value value, details\n          if ( as_html = field.outer_html ? null )?\n            is_done = true\n            R.push as_html value, details\n          else if ( as_html = field.inner_html ? null )?\n            inner_html = as_html value, details\n        unless is_done\n          if inner_html?\n            R.push HDML.pair 'td', { class: key, }, inner_html\n          else\n            value = rpr value unless @types.isa.text value\n            R.push HDML.pair 'td', { class: key, }, HDML.text value\n      #.....................................................................................................\n      R.push HDML.close 'tr'\n    #.......................................................................................................\n    push_table_headers null unless has_ths\n    R.push HDML.close 'table'\n    return R.join '\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  as_subtable_html: ( cfg ) -> \"NOT YET IMPLEMENTED\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_table_name: ( name ) ->\n    @types.validate.nonempty_text name\n    return \"_#{@cfg.prefix}_#{name[1..]}\" if name.startsWith '_'\n    return \"#{@cfg.prefix}_#{name}\"\n\n\n\n"
  ]
}